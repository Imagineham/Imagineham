Hamlet Fernandez
Jan 12, 2021

Computer Architecture for Scientists (Winter 2021)

Homework #1

Problems from Chapter 1

1.1 Enumerate five devices in your daily life that have computers inside today, but didn’t
20 years ago. For each, explain why computing benefits the device. For the user, and for
the company who sold it.

Nintendo switch
    It was pretty easy to write a recent game console onto this list, however, I want to use the switch as an example. Game consoles make 
    explaining computing and its impacts fairly easy, considering gaming is all about inputs and outputs which most of the times are visible and tangible.
    Consoles with controllers in which movement is directly mapped onto arrow keys or a joystick are good examples. However, as time has gone on, controllers
    have evolved to require less abstraction. Sensors in controllers or TV systems that compute movement and translate them into dancing games like Just Dance 2020 
    or swordfighting like in 1, 2, Switch! Computing has evolved from the simple "Press Start" which allows companies to create a variety of experiences, games that
    sell because some require you to move as input. To the user, they are afforded richer experiences that bring entertainment to more aspects of a gaming experience. 

Lightbulbs (bluetooth lights) 
    Computing has majorly impacted lighting in spaces by transforming them into systems that can be customized, and made more convenient. Bluetooth lightbulbs 
    are replacing classic lightbulbs because of color changing capabailities, being able to turn them off or on while in bed, can be dimmed or brightened, and can even 
    be scheduled to perform certain actions. Personally, I enjoy changing my lights' color for movie nights or for pictures. For companies, adding bluetooth into lightbulbs 
    adds convenience and accessiability which targets a much greater audience, increasing demand. 
    
Google Home(speakers, radios) 
    Computing in speakers and radios has created systems where many functions can exist in the same product and greatly increase accessability and convenienbce for users. 
    A google home that can set alarms, create reminders, control the lights, play music at various volumes, becomes something with more than just one purpose and 
    effectively becomes technology used several times a day. Users benefit from the how quickly they can add items to a shopping cart by voice, or how they can announce plans for the day 
    to their entire family, all in different rooms. Companies appreciate the use of their home assistants because it gives them alook at the private lives of individuals. Companies use computingin
    home assistants to make informed decisions about individuals that use their products and what future products they would like to buy.

Headphones 
    Thinking about wireless headphones, computing has increased sound quality, enabled noise cancellation, and allowed for touch capabailities that can be customized. Users benefit from 
    the better quality of life granted by headphones that can pick up and end calls, pause and play music, and barely take up space in one's pocket. Companies benefit from new information they gleam 
    from headphone usage that helps them better their products. 


OMNY (apple pay, transportation) (metrocard)
    This is an even more recent change but serves as a useful example for the use of computing in transportation. OMNY is New York City's new metrocard, a service that allows 
    New Yorkers to tap their phones to access buses, trains, and shuttles. It is much, much faster than the usual swiping procedure and I would say experiences less errors than what
    normally would occur at a turnstile when New Yorkers would have to swipe their cards at slower or faster speeds. OMNY users are saving several seconds in tapping their phone at 
    a turnstile, saving minutes from not having to purchase a metrocard at a vending machine, and saving money. Alternatively, the GPS systems, the e-banking, in OMNY allows New York to 
    better track bus and train usage, and track the flow of money into MTA. 



1.3 The integration of computing and networking have accelerated many activities in
society, e-commerce is one example. Analyze the steps to identify and purchase an article
of clothing in a world without the internet, smartphones, and e-commerce. Analyze the
steps in today’s modern world. Explain how the latency to receive the desired article has
changed. Explain how the time investment required of you has changed.

    Logically, I can imagine the latency without computing includes thinking of where to purchase the desired article, traveling outside, taking transportation, 
    going to either a store, individual, or group of individuals, selecting the wanted article, and purchasing the article with physical currency.
    The process can involve and/or require a lot of physical movement, social interaction, and math. Today, a consumer can simply google the item they want, filter through several websites offering the same or similar versions of the item, 
    purchase the item by inputting their debit/credit card's information and track it's arrival. While today we can still go out and shop, the process no longer 
    requires the same amount of physical activity or social interaction. Computers can now order purchases and because computers can be found everywhere, from 
    home assistants to game consoles to phones, purchases can be made from one's couch. The latency is much, much smaller and "going out shopping" has become more of 
    a social activity than a need. 


1.6 Another pervasive communication-use of computing is social media. Describe several features of how 
you interact with social media, and how computing is used to create posts, decide when they are visible, 
and even target advertising?

    I'd like to use Discord as my example. Discord is an application that has become one of most popular platforms for gamers to socialize and build community. Started in 2015, 
    Discord placed emphasis on video and audio communication which greatly enticed gamers who wanted an application to play and talk with their friend at the same time. Alongside 
    video and audio call, Discord has features where conversations can be grouped into channels, each with rules/facilities that can be controlled. Discord users can control many levels of 
    their experience and this is a result of computing. Primarily, Discord's servers work as an abstraction of the company's databases. When a user creates a server, or a channel, they do not actually create a 
    new server, but instead sign into already existing servers established through Discord's Internet Relay Chat infrastructure. As such, Discord can ultimately monitor any channels or chats created which 
    allows them to delete conversations, ban people, and control usage. Users also have the ability of connecting their discord with other apps like Facebook or twitter. In particular, discord users can connect
    their Spotify Account which allows them to display the music they are listening to their friends. Computers bridge the apps and from spotify to discord gather data like song, time-stamp, artist, and album and 
    copies that data over to discord which it can then present with its user interface. 


Problems from Chapter 2

2.1

    Part A: Set the value to 0 for registers X18-X25
            add x18, x18, x0
            add x19, x18, x0
            add x20, x18, x0
            add x21, x18, x0
            add x22, x18, x0
            add x23, x18, x0
            add x24, x18, x0
            add x25, x18, x0

    Part B: Put the first 8 prime numbers (1, 2, 3, 5, 7, 11, 13, 17) into registers X18-X25
            addi x18, x18, 1
            addi x19, x19, 2
            addi x20, x20, 3
            addi x21, x21, 5
            addi x22, x22, 7
            addi x23, x23, 11
            addi x24, x24, 13
            addi x25, x25, 17

    Part F: 
    //because the RISCV simulator accepts immediates up to 0x800, I broke up the given value
    //into 3 byte immediates. I shifted the values and added them together to get the desired result. \

    64-bit version: Put the value 0x0 0123 4567 89AB into X18
        addi x12, x0, 0x012
        slli x12, x12, 36
        addi x13,x0, 0x345
        slli x13, x13, 24
        addi x14, x0, 0x678
        slli x14, x14, 12
        add x13, x12, x13
        add x14, x13, x14
        addi x14, x14, 0x7FF
        addi, x14, x14, 0x1AC
        add x18, x18, x14

    32-bit version: Put the value 0x0 4567 89AB into x18
        addi x12, x0, 0x045
        slli x12, x12, 24
        addi x13, x0, 0x678
        slli x13, x13, 12
        add x13, x12, x13
        addi x13, x13, 0x7FF
        addi x13, x13, 0x1AC
        add x18, x18, x13

2.2

    Part A:
    
        64-bit version: Load the value from address 0x0 0FFF FFFF FFFF into X20
            addi x12, x0, -1 //-1 = 0xFFFFFFFFFFFF
            srli x12, x12, 20 //get rid of the 20 most significant bits to get 0x0FFFFFFFFFFF
            addi x13, x0, 7 //test value
            sd x13, 0(x12)
            ld x20, 0(x12)


        32-bit version: Load the value from address 0x0 FFFF FFFF into X20
            addi x12, x0, -1 
            addi x13, x0, 7 //test value
            sw x13, 0(x12) 
            lw x20, 0(x12) 

    Part G: 
        //we build the given value. Place "1" where we want them to be. 
        64-bit version: Store the value 127 as 64-bit value into address 0x0 0101 0101 0101
            addi x12, x0, 1
            slli x13, x12, 40
            slli x14, x12, 32
            slli x15, x12, 24
            slli x16, x12, 16
            slli, x17, x12, 8
            add x18, x12, x13
            add x18, x18, x14
            add x18, x18, x15
            add x18, x18, x16
            add x18, x18, x17 //adress 0x010101010101 in x18
            addi x19, x0, 127 //desired value
            sd x19, 0(x18)

        32-bit version: Store the value 127 as a 32-bit value into address 0x0 0101 0101
            addi x12, x0, 1
            slli x13, x12, 24
            slli x14, x12, 16
            slli x15, x12, 8
            add x16, x12, x13
            add x16, x16, x14
            add x16, x16, x15 //address 0x01010101 in x16
            addi x17, x0, 127 //desired value
            sw x17, 0(x16)

    Part I:
    
        64-bit version: Store the value 27 as 8-bit value (byte) into address 0x0 0123 4567 89AB
            addi x12, x0, 0x012
            slli x12, x12, 36
            addi x13,x0, 0x345
            slli x13, x13, 24
            addi x14, x0, 0x678
            slli x14, x14, 12
            add x13, x12, x13
            add x14, x13, x14
            addi x14, x14, 0x7FF
            addi, x14, x14, 0x1AC
            add x18, x18, x14
            addi x19, x0, 27
            sd x19, 0(x18)

        32-bit version: Store the value 27 as an 8-bit value (byte) into address 0x0 1234 5678
            addi x12, x0, 0x012
            slli x12, x12, 24
            addi x13, x0, 0x345
            slli x13, x13, 12
            add x13, x12, x13
            addi x13, x13, 0x678
            addi x14, x0, 27
            sw x14 0(x13)

2.5 

    addi x12, x0, 0xAA          //register x12 stores j == "int j" 
    slli x12, x12, 8            //limited by size of imm, using add + shift to move 0xAAAA into x12
    addi x12, x12, 0xAA         //j = 0xAAAA
doWhile:                        //we will be jumping BACK to here. do-while must run at least once
    slli x12, x12, 1            //j = j << 1
    blt x0, x12, doWhile        //j > 0 is the same as j < 0, if true jump back to doWhile. else continue to next inst
done:                           //j results in 0 
    

2.9 
needhelp:
    add x10, x0, x0 //n
    add x11, x0, x0 //j = 0
    add x12, x0, x0 //i = 0
loopBody:
    addi x14, x0, 8
    rem x13, x10, x14
    blt x0, x13, increment

    addi sp, sp -8 //making space on stack
    sd x1, 0(sp) //caller saves
    jal x1, helper //transfer control to callee
    ld x1, 0(sp)
    addi sp, sp, 8 //restore caller saved
    add x11, x11, x11 //else statement
    slti x15, x12, 64
    bne x15, x0, loopBody
return:
    jr ra

increment: 
    addi x12, x12, 1
    slti x15, x12, 64
    bne x15, x0, loopBody
    jr ra

helper:
    addi sp, sp, -8 //making space on stack for callee
    sd x5, 0(sp) //save callee saves
    add x10, x10, x10 //helper body
    ld x5, 0(sp) //restore callee saved
    addi sp, sp, 8 //deallocate space on stack
    jr x1 //jump to return addresss


2.21 

A: Deprecated means that the instruction is still supported, but executes with lower performance. What are the consequences of this for software that uses the instructions?

    The use of deprecated instructions adds a level of obscurity to the programmer that may ultimately cause efficiency and performance issues. Since an instruction is still 
    supported, the programmer would not see any immediate errors stopping their code from running. However, the programmer may expect their code to have certain runtimes which 
    deprecated instructions will certainly increase. Longer runtimes may cause software to be less efficient and if various instructions are deprecated efficiency could be affected 
    on several orders of magnitude. Considering the fact that instructions sets bridge software and hardware, if the latency of instruction sets increase, the length of 1 clock cycle 
    increases, and all of the software is then slowed down. 


B: After several years of being depracated, instructions can be removed (the bits cause
some other newly defined instruction to execute). What are the consequences of this
for software that uses the instructions?

    Old computers with outdated instruction set architectures are barred from using new software and technology. Outdated software can then on only be used to perform tasks it allows, 
    but as computers become faster and more efficient, newer computers become better at performing the same tasks as older computers. Thus, software that cannot be flexible or adaptable 
    enough to accept changes in ISA development will become outdated much quicker than software that can accept a wider range of ISA's.  


C: Imagine a situation where a computer processor designer deprecated a set of instructions for 6 years, and then removed it in future products after this period. What is
the consequence for machines that were sold and continue to operate in the world?
What is the consequence for a software developer who is distributing program binaries (executables) as a product? the customers who bought either the processors or the
software?

    Firstly, machines running with deprecated instruction set architecture will experience much slower performance speeds than newer products with updated ISA's. 
    These products overtime will fail to catch up to newer and newer models, ultimately leading companies to discontinue old models completely. In reference to Figure 1.3, 
    these computer's failed to ride "the wave" and crash. Secondly, for machines that were sold and continue to operate they effectively are bound by the instructions they
    can use and are unable to run modernized programs. Normally, even with depcrecated instructions an old computer can run at least unpredictably but in the case where the new 
    computer functions entirely without some instructions, these computers become incapable of backwards-compatibility. This forces programmers and companies to specify models and 
    ISA versions that clarify compatibility issues between software and hardware families. ISA models, processor models, hardware models, etc., become valuable pieces of information that 
    software developers must pay attention to when creating and distributing program binaries. While at the same time, upon each development of the ISA, software developers 
    are given a set environment to work with which can be both limiting and enabling. Lastly, customers are now also required to stay up to 
    date with their instruction set architecture model and development. Customers and developers alike benefit from tracking development changes, however, it is much more difficult to 
    explain changes in ISA to the everyday customer. This open up new challenges for companies to strategize on how to market and sell their "smaller, and faster" products. 


Extra Credit: 
    Page 21 "The most common size moved is a machine word which is typically 64-bits (8 bytes) and matches the size of a register."
        This might not be cause for concern, but when I remember first learning about words and doublewords in 154 it made it easy for me to understand the difference 
        because I thought words were only at max 32-bits and doublewords were always 64-bits. The explanation written in the book in which words match the 
        size of the register makes a lot of sense, however, given much of the historical references already present in the book, I was curious about the history behind "word" and "doubleword". 

    Page 23 "We have several examples using the Account structs. The first example simply accesses the theID field"
        Here, I was a bit confused because theID and UniqueId are similar but the paragraph describing the example came in between the struct and the
        code. I understand why it might be better to explain first and then show the example, perhaps spacing and organization, however, I think keeping the 
        struct with the code might be more cohesive. Lastly, I believe "theID field" is a little unclear. In the example, "theID" is the name of the variable but 
        the field being accessed is "UniqueID". 
    
    Page 26  "slli x14 , x13 , #16 / / 16384∗112" 
        A shift of 16 means 2^16, however, 2^16 does not equal 16384 but 2^14 does. As such, I believe the change should be "slli x14, x13, 14 // 16384*12". 